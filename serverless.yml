service: stuff123

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, "scratch0"}
  region: eu-west-2
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  environment:
    FOOR: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:provider.stage}-hello-payment"
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

plugins:
  - serverless-pseudo-parameters

functions:
  create:
    role: "arn:aws:iam::#{AWS::AccountId}:role/stuff123"
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    role: "arn:aws:iam::#{AWS::AccountId}:role/stuff123"
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    role: "arn:aws:iam::#{AWS::AccountId}:role/stuff123"
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    role: "arn:aws:iam::#{AWS::AccountId}:role/stuff123"
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    role: "arn:aws:iam::#{AWS::AccountId}:role/stuff123"
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
